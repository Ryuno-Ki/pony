from pony.converting import timedelta2str
from pony.orm import core, dbapiprovider, dbschema, ormtypes, sqltranslation
from pony.orm.core import log_orm
from pony.orm.dbapiprovider import DBAPIProvider, Pool, wrap_dbapi_exceptions
from pony.orm.sqlbuilding import SQLBuilder, Value, join
from pony.orm.sqltranslation import SQLTranslator
from pony.py23compat import PY2, basestring, buffer, int_types, unicode
from pony.utils import is_ident
from psycopg2 import extensions
from typing import Any, List, Optional, Tuple

NoneType: Any

class PGColumn(dbschema.Column):
    auto_template: str = ...

class PGSchema(dbschema.DBSchema):
    dialect: str = ...
    column_class: Any = ...  # TODO: Should be PGColumn

class PGTranslator(SQLTranslator):
    dialect: str = ...

class PGValue(Value):
    def __unicode__(self): ...

class PGSQLBuilder(SQLBuilder):
    dialect: str = ...
    value_class: Any = ...  # TODO: Should be PGValue
    def INSERT(builder: Any, table_name: Any, columns: Any, values: Any, returning: Optional[Any] = ...) -> Any: ...
    def TO_INT(builder: Any, expr: Any) -> str: ...
    def TO_STR(builder: Any, expr: Any) -> str: ...
    def TO_REAL(builder: Any, expr: Any) -> str: ...
    def DATE(builder: Any, expr: Any) -> str: ...
    def RANDOM(builder: Any) -> str: ...
    def DATE_ADD(builder: Any, expr: Any, delta: Any) -> str: ...
    def DATE_SUB(builder: Any, expr: Any, delta: Any) -> str: ...
    def DATE_DIFF(builder: Any, expr1: Any, expr2: Any) -> str: ...
    def DATETIME_ADD(builder: Any, expr: Any, delta: Any) -> str: ...
    def DATETIME_SUB(builder: Any, expr: Any, delta: Any) -> str: ...
    def DATETIME_DIFF(builder: Any, expr1: Any, expr2: Any) -> str: ...
    def eval_json_path(builder: Any, values: Any) -> str: ...
    def JSON_QUERY(builder: Any, expr: Any, path: Any) -> str: ...
    json_value_type_mapping: Dict[Any, str] = ...
    def JSON_VALUE(builder: Any, expr: Any, path: Any, type: Any) -> Any: ...
    def JSON_NONZERO(builder: Any, expr: Any) -> str: ...
    def JSON_CONCAT(builder: Any, left: Any, right: Any) -> str: ...
    def JSON_CONTAINS(builder: Any, expr: Any, path: Any, key: Any): ...
    def JSON_ARRAY_LENGTH(builder: Any, value: Any) -> str: ...
    def GROUP_CONCAT(builder: Any, distinct: Any, expr: Any, sep: Optional[Any] = ...) -> str: ...
    def ARRAY_INDEX(builder: Any, col: Any, index: Any) -> str: ...
    def ARRAY_CONTAINS(builder: Any, key: Any, not_in: Any, col: Any) -> str: ...
    def ARRAY_SUBSET(builder: Any, array1: Any, not_in: Any, array2: Any) -> str: ...
    def ARRAY_LENGTH(builder: Any, array: Any) -> str: ...
    def ARRAY_SLICE(builder: Any, array: Any, start: Any, stop: Any) -> str: ...
    def MAKE_ARRAY(builder: Any, *items: Any) -> str: ...

class PGStrConverter(dbapiprovider.StrConverter): ...

class PGIntConverter(dbapiprovider.IntConverter):
    signed_types: Any = ...  # TODO: Should be Dict[Optional[str], int]
    unsigned_types: Any = ...  # TODO: Should be Dict[Optional[str], int]

class PGRealConverter(dbapiprovider.RealConverter):
    def sql_type(converter: Any) -> str: ...

class PGBlobConverter(dbapiprovider.BlobConverter):
    def sql_type(converter: Any) -> str: ...

class PGTimedeltaConverter(dbapiprovider.TimedeltaConverter):
    sql_type_name: str = ...

class PGDatetimeConverter(dbapiprovider.DatetimeConverter):
    sql_type_name: str = ...

class PGUuidConverter(dbapiprovider.UuidConverter):
    def py2sql(converter: Any, val: Any) -> Any: ...

class PGJsonConverter(dbapiprovider.JsonConverter):
    def sql_type(self) -> str: ...

class PGArrayConverter(dbapiprovider.ArrayConverter):
    array_types: Any = ...  # TODO: Should be Dict[Any, Tuple[str, Any]]

class PGPool(Pool):
    def release(pool: Any, con: Any) -> None: ...

class PGProvider(DBAPIProvider):
    dialect: str = ...
    paramstyle: str = ...
    max_name_len: int = ...
    max_params_count: int = ...
    index_if_not_exists_syntax: bool = ...
    dbapi_module: Any = ...
    dbschema_cls: Any = ...  # TODO: Should be PGSchema
    translator_cls: Any = ...  # TODO: Should be PGTranslator
    sqlbuilder_cls: Any = ...  # TODO: Should be PGSQLBuilder
    array_converter_cls: Any = ...  # TODO: Should be PGArrayConverter
    default_schema_name: str = ...
    fk_types: Dict[str, str] = ...
    def normalize_name(provider: Any, name: Any) -> str: ...
    def inspect_connection(provider: Any, connection: Any) -> None: ...
    def should_reconnect(provider: Any, exc: Any) -> bool: ...
    def get_pool(provider: Any, *args: Any, **kwargs: Any) -> Any: ...
    def set_transaction_mode(provider: Any, connection: Any, cache: Any) -> None: ...
    def execute(provider: Any, cursor: Any, sql: Any, arguments: Optional[Any] = ..., returning_id: bool = ...) -> Any: ...
    def table_exists(provider: Any, connection: Any, table_name: Any, case_sensitive: bool = ...) -> Optional[Any]: ...
    def index_exists(provider: Any, connection: Any, table_name: Any, index_name: Any, case_sensitive: bool = ...) -> Optional[Any]: ...
    def fk_exists(provider: Any, connection: Any, table_name: Any, fk_name: Any, case_sensitive: bool = ...) -> Optional[Any]: ...
    def drop_table(provider: Any, connection: Any, table_name: Any) -> None: ...
    converter_classes: List[Tuple[Any, Any]] = ...
provider_cls = PGProvider
