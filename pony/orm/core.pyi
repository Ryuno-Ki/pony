import pony
from pony.orm.asttranslation import TranslationError
from pony.orm.dbapiprovider import (
    DBException,
    DataError,
    DatabaseError,
    Error,
    IntegrityError,
    InterfaceError,
    InternalError,
    NotSupportedError,
    OperationalError,
    ProgrammingError,
    Warning
)
from pony.orm.ormtypes import (
    FloatArray,
    IntArray,
    Json,
    LongStr,
    LongUnicode,
    StrArray,
    raw_sql
)
from pony.py23compat import buffer, unicode
from pony.utils import between, coalesce, concat, localbase
from typing import Any, Dict, Optional as _Optional, Set as _Set, Tuple

def sql_debug(value: Any) -> None: ...
def set_sql_debug(debug: bool = ..., show_values: _Optional[Any] = ...) -> None: ...

adapted_sql_cache: Dict[Tuple[Any, Any], Any] = ...
string2ast_cache: Dict[str, Any] = ...

class OrmError(Exception): ...
class ERDiagramError(OrmError): ...
class DBSchemaError(OrmError): ...
class MappingError(OrmError): ...
class BindingError(OrmError): ...
class TableDoesNotExist(OrmError): ...
class TableIsNotEmpty(OrmError): ...
class ConstraintError(OrmError): ...
class CacheIndexError(OrmError): ...
class RowNotFound(OrmError): ...
class MultipleRowsFound(OrmError): ...
class TooManyRowsFound(OrmError): ...
class PermissionError(OrmError): ...

class ObjectNotFound(OrmError):
    def __init__(exc: Any, entity: Any, pkval: _Optional[Any] = ...) -> None: ...

class MultipleObjectsFoundError(OrmError): ...
class TooManyObjectsFoundError(OrmError): ...
class OperationWithDeletedObjectError(OrmError): ...
class TransactionError(OrmError): ...
class ConnectionClosedError(TransactionError): ...

class TransactionIntegrityError(TransactionError):
    def __init__(exc: Any, msg: Any, original_exc: _Optional[Any] = ...) -> None: ...

class CommitException(TransactionError):
    def __init__(exc: Any, msg: Any, exceptions: Any) -> None: ...

class PartialCommitException(TransactionError):
    def __init__(exc: Any, msg: Any, exceptions: Any) -> None: ...

class RollbackException(TransactionError):
    def __init__(exc: Any, msg: Any, exceptions: Any) -> None: ...

class DatabaseSessionIsOver(TransactionError): ...
TransactionRolledBack = DatabaseSessionIsOver

class IsolationError(TransactionError): ...
class UnrepeatableReadError(IsolationError): ...
class OptimisticCheckError(IsolationError): ...
class UnresolvableCyclicDependency(TransactionError): ...

class UnexpectedError(TransactionError):
    def __init__(exc: Any, msg: Any, original_exc: Any) -> None: ...

class ExprEvalError(TranslationError):
    def __init__(exc: Any, src: Any, cause: Any) -> None: ...

class PonyInternalException(Exception): ...
class OptimizationFailed(PonyInternalException): ...

class UseAnotherTranslator(PonyInternalException):
    translator: Any = ...
    def __init__(self, translator: Any) -> None: ...

class PonyRuntimeWarning(RuntimeWarning): ...
class DatabaseContainsIncorrectValue(PonyRuntimeWarning): ...
class DatabaseContainsIncorrectEmptyValue(DatabaseContainsIncorrectValue): ...

class PrefetchContext:
    database: Any = ...
    attrs_to_prefetch_dict: Any = ...
    entities_to_prefetch: Set = ...
    relations_to_prefetch_cache: Dict = ...
    def __init__(self, database: _Optional[Any] = ...) -> None: ...
    def copy(self) -> PrefetchContext: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def get_frozen_attrs_to_prefetch(self, entity: Any) -> Any: ...
    def get_relations_to_prefetch(self, entity: Any) -> Any: ...

class Local(localbase):
    def __init__(local: Any) -> None: ...
    @property
    def prefetch_context(local: Any) -> Optional[Any]: ...
    def push_debug_state(local: Any, debug: Any, show_values: Any) -> None: ...
    def pop_debug_state(local: Any) -> None: ...

def flush() -> None: ...
def commit() -> None: ...
def rollback() -> None: ...

class DBSessionContextManager:
    def __init__(db_session: Any, retry: int = ..., immediate: bool = ..., ddl: bool = ..., serializable: bool = ..., strict: bool = ..., optimistic: bool = ..., retry_exceptions: Any = ..., allowed_exceptions: Any = ..., sql_debug: _Optional[Any] = ..., show_values: _Optional[Any] = ...) -> None: ...
    def __call__(db_session: Any, *args: Any, **kwargs: Any) -> Any: ...
    def __enter__(db_session: Any) -> None: ...
    def __exit__(db_session: Any, exc_type: _Optional[Any] = ..., exc: _Optional[Any] = ..., tb: _Optional[Any] = ...) -> None: ...

db_session: Any

class SQLDebuggingContextManager:
    debug: bool = ...
    show_values: Any = ...
    def __init__(self, debug: bool = ..., show_values: _Optional[Any] = ...) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: _Optional[Any] = ..., exc: _Optional[Any] = ..., tb: _Optional[Any] = ...) -> None: ...

sql_debugging: Any

def with_transaction(*args: Any, **kwargs: Any) -> Any: ...

class OnConnectDecorator:
    @staticmethod
    def check_provider(provider: Any) -> None: ...
    provider: Any = ...
    database: Any = ...
    def __init__(self, database: Any, provider: Any) -> None: ...
    def __call__(self, func: _Optional[Any] = ..., provider: _Optional[Any] = ...) -> Any: ...

class Database:
    def __deepcopy__(self, memo: Any) -> Database: ...
    priority: int = ...
    entities: Any = ...
    schema: Any = ...
    Entity: Any = ...
    on_connect: Any = ...
    provider: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def call_on_connect(database: Any, con: Any) -> None: ...
    def bind(self, *args: Any, **kwargs: Any) -> None: ...
    @property
    def last_sql(database: Any) -> Any: ...
    @property
    def local_stats(database: Any) -> Any: ...
    def merge_local_stats(database: Any) -> None: ...
    @property
    def global_stats(database: Any) -> Any: ...
    @property
    def global_stats_lock(database: Any) -> Any: ...
    def get_connection(database: Any) -> Any: ...
    def disconnect(database: Any) -> None: ...
    def flush(database: Any) -> None: ...
    def commit(database: Any) -> None: ...
    def rollback(database: Any) -> None: ...
    def execute(database: Any, sql: Any, globals: _Optional[Any] = ..., locals: _Optional[Any] = ...) -> Any: ...
    def select(database: Any, sql: Any, globals: _Optional[Any] = ..., locals: _Optional[Any] = ..., frame_depth: int = ...) -> List: ...
    def get(database: Any, sql: Any, globals: _Optional[Any] = ..., locals: _Optional[Any] = ...) -> Any: ...
    def exists(database: Any, sql: Any, globals: _Optional[Any] = ..., locals: _Optional[Any] = ...) -> bool: ...
    def insert(database: Any, table_name: Any, returning: _Optional[Any] = ..., **kwargs: Any) -> Any: ...
    def generate_mapping(database: Any, filename: _Optional[Any] = ..., check_tables: bool = ..., create_tables: bool = ...): ...
    def drop_table(database: Any, table_name: Any, if_exists: bool = ..., with_all_data: bool = ...) -> None: ...
    def drop_all_tables(database: Any, with_all_data: bool = ...) -> None: ...
    def create_tables(database: Any, check_tables: bool = ...) -> None: ...
    def check_tables(database: Any) -> None: ...
    def set_perms_for(database: Any, *entities: Any) -> None: ...
    def to_json(database: Any, data: Any, include: Any = ..., exclude: Any = ..., converter: _Optional[Any] = ..., with_schema: bool = ..., schema_hash: _Optional[Any] = ...) -> str: ...
    def from_json(database: Any, changes: Any, observer: _Optional[Any] = ...): ...

def perm(*args: Any, **kwargs: Any) -> Any: ...

class AccessRule:
    def __init__(rule: Any, database: Any, entities: Any, permissions: Any, groups: Any, roles: Any, labels: Any) -> None: ...
    def exclude(rule: Any, *args: Any) -> None: ...

def has_perm(user: Any, perm: Any, x: Any) -> bool: ...
def get_current_user() -> Any: ...
def set_current_user(user: Any) -> None: ...
def get_user_groups(user: Any) -> Any: ...
def get_user_roles(user: Any, obj: Any) -> Any: ...
def get_object_labels(obj: Any) -> Any: ...
def user_groups_getter(cls: _Optional[Any] = ...) -> Any: ...
def user_roles_getter(user_cls: _Optional[Any] = ..., obj_cls: _Optional[Any] = ...) -> Any: ...
def obj_labels_getter(cls: _Optional[Any] = ...) -> Any: ...

class DbLocal(localbase):
    def __init__(dblocal: Any) -> None: ...

class QueryStat:
    def __init__(stat: Any, sql: Any, duration: _Optional[Any] = ...) -> None: ...
    def copy(stat: Any) -> QueryStat: ...
    def query_executed(stat: Any, duration: Any) -> None: ...
    def merge(stat: Any, stat2: Any) -> None: ...
    @property
    def avg_time(stat: Any) -> float: ...

class SessionCache:
    def __init__(cache: Any, database: Any): ...
    def connect(cache: Any) -> Any: ...
    def reconnect(cache: Any, exc: Any) -> Any: ...
    def prepare_connection_for_query_execution(cache: Any) -> Any: ...
    def flush_and_commit(cache: Any) -> None: ...
    def commit(cache: Any) -> None: ...
    def rollback(cache: Any) -> None: ...
    def release(cache: Any) -> None: ...
    def close(cache: Any, rollback: bool = ...) -> None: ...
    def flush_disabled(cache: Any) -> None: ...
    def flush(cache: Any) -> None: ...
    def call_after_save_hooks(cache: Any) -> None: ...
    def update_simple_index(cache: Any, obj: Any, attr: Any, old_val: Any, new_val: Any, undo: Any) -> None: ...
    def db_update_simple_index(cache: Any, obj: Any, attr: Any, old_dbval: Any, new_dbval: Any) -> None: ...
    def update_composite_index(cache: Any, obj: Any, attrs: Any, prev_vals: Any, new_vals: Any, undo: Any) -> None: ...
    def db_update_composite_index(cache: Any, obj: Any, attrs: Any, prev_vals: Any, new_vals: Any) -> None: ...

class NotLoadedValueType: ...
class DefaultValueType: ...

class DescWrapper:
    attr: Any = ...
    def __init__(self, attr: Any) -> None: ...
    def __call__(self) -> DescWrapper: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> Any: ...

class Attribute:
    def __deepcopy__(attr: Any, memo: Any) -> Any: ...
    def __init__(attr: Any, py_type: Any, *args: Any, **kwargs: Any) -> None: ...
    def linked(attr: Any) -> None: ...
    def __lt__(attr: Any, other: Any) -> bool: ...
    def validate(attr: Any, val: Any, obj: _Optional[Any] = ..., entity: _Optional[Any] = ..., from_db: bool = ...) -> Any: ...
    def parse_value(attr: Any, row: Any, offsets: Any, dbvals_deduplication_cache: Any) -> Any: ...
    def load(attr: Any, obj: Any) -> Any: ...
    def __get__(attr: Any, obj: Any, cls: _Optional[Any] = ...) -> Any: ...
    def get(attr: Any, obj: Any) -> Any: ...
    def __set__(attr: Any, obj: Any, new_val: Any, undo_funcs: _Optional[Any] = ...) -> None: ...
    def db_set(attr: Any, obj: Any, new_dbval: Any, is_reverse_call: bool = ...) -> None: ...
    def update_reverse(attr: Any, obj: Any, old_val: Any, new_val: Any, undo_funcs: Any) -> None: ...
    def db_update_reverse(attr: Any, obj: Any, old_dbval: Any, new_dbval: Any) -> None: ...
    def __delete__(attr: Any, obj: Any) -> None: ...
    def get_raw_values(attr: Any, val: Any) -> Any: ...
    def get_columns(attr: Any) -> Any: ...
    @property
    def asc(attr: Any) -> Any: ...
    @property
    def desc(attr: Any) -> DescWrapper: ...
    def describe(attr: Any) -> str: ...

class Optional(Attribute): ...

class Required(Attribute):
    def validate(attr: Any, val: Any, obj: _Optional[Any] = ..., entity: _Optional[Any] = ..., from_db: bool = ...) -> Any: ...

class Discriminator(Required):
    def __init__(attr: Any, py_type: Any, *args: Any, **kwargs: Any) -> None: ...
    @staticmethod
    def create_default_attr(entity: Any) -> None: ...
    def process_entity_inheritance(attr: Any, entity: Any) -> None: ...
    def validate(attr: Any, val: Any, obj: _Optional[Any] = ..., entity: _Optional[Any] = ..., from_db: bool = ...) -> Any: ...
    def load(attr: Any, obj: Any) -> None: ...
    def __get__(attr: Any, obj: Any, cls: _Optional[Any] = ...) -> Any: ...
    def __set__(attr: Any, obj: Any, new_val: Any) -> None: ...
    def db_set(attr: Any, obj: Any, new_dbval: Any) -> None: ...
    def update_reverse(attr: Any, obj: Any, old_val: Any, new_val: Any, undo_funcs: Any) -> None: ...

class Index:
    def __init__(index: Any, *attrs: Any, **options: Any) -> None: ...

def composite_index(*attrs: Any) -> None: ...
def composite_key(*attrs: Any) -> None: ...

class PrimaryKey(Required):
    def __new__(cls, *args: Any, **kwargs: Any) -> Optional[Required]: ...

class Collection(Attribute):
    def __init__(attr: Any, py_type: Any, *args: Any, **kwargs: Any) -> None: ...
    def load(attr: Any, obj: Any) -> None: ...
    def __get__(attr: Any, obj: Any, cls: _Optional[Any] = ...) -> None: ...
    def __set__(attr: Any, obj: Any, val: Any) -> None: ...
    def __delete__(attr: Any, obj: Any) -> None: ...
    def prepare(attr: Any, obj: Any, val: Any, fromdb: bool = ...) -> None: ...
    def set(attr: Any, obj: Any, val: Any, fromdb: bool = ...) -> None: ...

class SetData(set):
    def __init__(setdata: Any) -> None: ...

class Set(Collection):
    def validate(attr: Any, val: Any, obj: _Optional[Any] = ..., entity: _Optional[Any] = ..., from_db: bool = ...) -> Any: ...
    def prefetch_load_all(attr: Any, objects: Any) -> Any: ...
    def load(attr: Any, obj: Any, items: _Optional[Any] = ...) -> Any: ...
    def construct_sql_m2m(attr: Any, batch_size: int = ..., items_count: int = ...) -> Any: ...
    def copy(attr: Any, obj: Any) -> _Set: ...
    def __get__(attr: Any, obj: Any, cls: _Optional[Any] = ...) -> Any: ...
    def __set__(attr: Any, obj: Any, new_items: Any, undo_funcs: _Optional[Any] = ...) -> None: ...
    def __delete__(attr: Any, obj: Any) -> None: ...
    def reverse_add(attr: Any, objects: Any, item: Any, undo_funcs: Any) -> None: ...
    def db_reverse_add(attr: Any, objects: Any, item: Any) -> None: ...
    def reverse_remove(attr: Any, objects: Any, item: Any, undo_funcs: Any) -> None: ...
    def db_reverse_remove(attr: Any, objects: Any, item: Any) -> None: ...
    def get_m2m_columns(attr: Any, is_reverse: bool = ...) -> Any: ...
    def remove_m2m(attr: Any, removed: Any) -> None: ...
    def add_m2m(attr: Any, added: Any) -> None: ...
    def drop_table(attr: Any, with_all_data: bool = ...) -> None: ...

class SetIterator:
    def __init__(self, wrapper: Any) -> None: ...
    def __iter__(self) -> SetIterator: ...
    def next(self) -> Any: ...
    __next__: Any = ...

class SetInstance:
    def __init__(wrapper: Any, obj: Any, attr: Any) -> None: ...
    def __reduce__(wrapper: Any) -> Any: ...
    def copy(wrapper: Any) -> Any: ...
    def __nonzero__(wrapper: Any) -> bool: ...
    def is_empty(wrapper: Any) -> bool: ...
    def __len__(wrapper: Any) -> int: ...
    def count(wrapper: Any) -> Any: ...
    def __iter__(wrapper: Any) -> SetIterator: ...
    def __eq__(wrapper: Any, other: Any) -> bool: ...
    def __ne__(wrapper: Any, other: Any) -> bool: ...
    def __add__(wrapper: Any, new_items: Any): ...
    def __sub__(wrapper: Any, items: Any): ...
    def __contains__(wrapper: Any, item: Any) -> bool: ...
    def create(wrapper: Any, **kwargs: Any) -> Any: ...
    def add(wrapper: Any, new_items: Any) -> None: ...
    def __iadd__(wrapper: Any, items: Any) -> Any: ...
    def remove(wrapper: Any, items: Any) -> None: ...
    def __isub__(wrapper: Any, items: Any) -> Any: ...
    def clear(wrapper: Any) -> None: ...
    def load(wrapper: Any) -> None: ...
    def select(wrapper: Any, *args: Any, **kwargs: Any) -> Any: ...
    filter: Any = ...
    def limit(wrapper: Any, limit: _Optional[Any] = ..., offset: _Optional[Any] = ...) -> Any: ...
    def page(wrapper: Any, pagenum: Any, pagesize: int = ...) -> Any: ...
    def order_by(wrapper: Any, *args: Any) -> Any: ...
    def sort_by(wrapper: Any, *args: Any) -> Any: ...
    def random(wrapper: Any, limit: Any) -> Any: ...

class Multiset:
    def __init__(multiset: Any, obj: Any, attrnames: Any, items: Any) -> None: ...
    def __reduce__(multiset: Any) -> Any: ...
    def distinct(multiset: Any) -> Any: ...
    def __nonzero__(multiset: Any) -> bool: ...
    def __len__(multiset: Any) -> int: ...
    def __iter__(multiset: Any) -> Any: ...
    def __eq__(multiset: Any, other: Any) -> bool: ...
    def __ne__(multiset: Any, other: Any) -> bool: ...
    def __contains__(multiset: Any, item: Any) -> bool: ...

class EntityIter:
    entity: Any = ...
    def __init__(self, entity: Any) -> None: ...
    def next(self) -> None: ...
    __next__: Any = ...

class EntityMeta(type):
    def __new__(meta: Any, name: Any, bases: Any, cls_dict: Any) -> Any: ...
    def __init__(entity: Any, name: Any, bases: Any, cls_dict: Any) -> None: ...
    def __iter__(entity: Any) -> EntityIter: ...
    def __getitem__(entity: Any, key: Any) -> Any: ...
    def exists(entity: Any, *args: Any, **kwargs: Any) -> bool: ...
    def get(entity: Any, *args: Any, **kwargs: Any) -> Any: ...
    def get_for_update(entity: Any, *args: Any, **kwargs: Any) -> Any: ...
    def get_by_sql(entity: Any, sql: Any, globals: _Optional[Any] = ..., locals: _Optional[Any] = ...) -> Any: ...
    def select(entity: Any, *args: Any, **kwargs: Any) -> Any: ...
    def select_by_sql(entity: Any, sql: Any, globals: _Optional[Any] = ..., locals: _Optional[Any] = ...) -> Any: ...
    def select_random(entity: Any, limit: Any) -> Any: ...
    def describe(entity: Any) -> str: ...
    def drop_table(entity: Any, with_all_data: bool = ...) -> None: ...

def make_proxy(obj: Any) -> EntityProxy: ...

class EntityProxy:
    def __init__(self, obj: Any) -> None: ...
    def __getattr__(self, name: Any) -> Any: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...

class Entity:
    def __reduce__(obj: Any) -> Any: ...
    def __init__(obj: Any, *args: Any, **kwargs: Any) -> None: ...
    def get_pk(obj: Any) -> Any: ...
    def __lt__(entity: Any, other: Any) -> bool: ...
    def __le__(entity: Any, other: Any) -> bool: ...
    def __gt__(entity: Any, other: Any) -> bool: ...
    def __ge__(entity: Any, other: Any) -> bool: ...
    def load(obj: Any, *attrs: Any) -> None: ...
    def delete(obj: Any) -> None: ...
    def set(obj: Any, **kwargs: Any) -> None: ...
    def find_updated_attributes(obj: Any) -> str: ...
    def flush(obj: Any) -> None: ...
    def before_insert(obj: Any) -> None: ...
    def before_update(obj: Any) -> None: ...
    def before_delete(obj: Any) -> None: ...
    def after_insert(obj: Any) -> None: ...
    def after_update(obj: Any) -> None: ...
    def after_delete(obj: Any) -> None: ...
    def to_dict(obj: Any, only: _Optional[Any] = ..., exclude: _Optional[Any] = ..., with_collections: bool = ..., with_lazy: bool = ..., related_objects: bool = ...) -> Any: ...
    def to_json(obj: Any, include: Any = ..., exclude: Any = ..., converter: _Optional[Any] = ..., with_schema: bool = ..., schema_hash: _Optional[Any] = ...) -> Any: ...

def select(*args: Any) -> Any: ...
def left_join(*args: Any) -> Any: ...
def get(*args: Any) -> Any: ...
def exists(*args: Any) -> Any: ...
def delete(*args: Any) -> Any: ...

count: Any
sum: Any
min: Any
max: Any
avg: Any
group_concat: Any
distinct: Any

def JOIN(expr: Any) -> Any: ...
def desc(expr: Any) -> Any: ...

class Query:
    def __init__(query: Any, code_key: Any, tree: Any, globals: Any, locals: Any, cells: _Optional[Any] = ..., left_join: bool = ...) -> None: ...
    def __reduce__(query: Any) -> Any: ...
    def get_sql(query: Any) -> Any: ...
    def prefetch(query: Any, *args: Any) -> Any: ...
    def show(query: Any, width: _Optional[Any] = ..., stream: _Optional[Any] = ...) -> None: ...
    def get(query: Any) -> Optional[Any]: ...
    def first(query: Any) -> Optional[Any]: ...
    def without_distinct(query: Any) -> Any: ...
    def distinct(query: Any) -> Any: ...
    def exists(query: Any) -> Any: ...
    def delete(query: Any, bulk: _Optional[Any] = ...) -> int: ...
    def __len__(query: Any) -> int: ...
    def __iter__(query: Any) -> Any: ...
    def order_by(query: Any, *args: Any) -> Any: ...
    def sort_by(query: Any, *args: Any) -> Any: ...
    def filter(query: Any, *args: Any, **kwargs: Any) -> Any: ...
    def where(query: Any, *args: Any, **kwargs: Any) -> Any: ...
    def __getitem__(query: Any, key: Any) -> Any: ...
    def fetch(query: Any, limit: _Optional[Any] = ..., offset: _Optional[Any] = ...) -> Any: ...
    def limit(query: Any, limit: _Optional[Any] = ..., offset: _Optional[Any] = ...) -> Any: ...
    def page(query: Any, pagenum: Any, pagesize: int = ...) -> Any: ...
    def sum(query: Any, distinct: _Optional[Any] = ...) -> Any: ...
    def avg(query: Any, distinct: _Optional[Any] = ...) -> Any: ...
    def group_concat(query: Any, sep: _Optional[Any] = ..., distinct: _Optional[Any] = ...) -> Any: ...
    def min(query: Any) -> Any: ...
    def max(query: Any) -> Any: ...
    def count(query: Any, distinct: _Optional[Any] = ...) -> Any: ...
    def for_update(query: Any, nowait: bool = ..., skip_locked: bool = ...) -> Any: ...
    def random(query: Any, limit: Any) -> Any: ...
    def to_json(query: Any, include: Any = ..., exclude: Any = ..., converter: _Optional[Any] = ..., with_schema: bool = ..., schema_hash: _Optional[Any] = ...) -> Any: ...

class QueryResultIterator:
    def __init__(self, query_result: Any) -> None: ...
    def next(self): ...
    __next__: Any = ...
    def __length_hint__(self) -> int: ...

class QueryResult:
    def __init__(self, query: Any, limit: Any, offset: Any, lazy: Any) -> None: ...
    def __iter__(self) -> QueryResultIterator: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __contains__(self, item: Any) -> bool: ...
    def index(self, item: Any) -> Any: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    def __reversed__(self) -> Any: ...
    def reverse(self) -> None: ...
    def sort(self, *args: Any, **kwargs: Any) -> None: ...
    def shuffle(self) -> None: ...
    def show(self, width: _Optional[Any] = ..., stream: _Optional[Any] = ...): ...
    def to_json(self, include: Any = ..., exclude: Any = ..., converter: _Optional[Any] = ..., with_schema: bool = ..., schema_hash: _Optional[Any] = ...) -> Any: ...
    def __add__(self, other: Any) -> Any: ...
    def __radd__(self, other: Any) -> Any: ...
    def to_list(self) -> List: ...
    __setitem__: Any = ...
    __delitem__: Any = ...
    __iadd__: Any = ...
    __imul__: Any = ...
    __mul__: Any = ...
    __rmul__: Any = ...
    append: Any = ...
    clear: Any = ...
    extend: Any = ...
    insert: Any = ...
    pop: Any = ...
    remove: Any = ...

def show(entity: Any) -> None: ...
