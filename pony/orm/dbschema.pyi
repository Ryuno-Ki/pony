from pony.orm import core
from pony.orm.core import DBSchemaError, MappingError, log_sql
from pony.py23compat import basestring, int_types, itervalues
from pony.utils import throw
from typing import Any, Optional

class DBSchema:
    dialect: Any = ...
    inline_fk_syntax: bool = ...
    named_foreign_keys: bool = ...
    def __init__(schema: Any, provider: Any, uppercase: bool = ...) -> None: ...
    def column_list(schema: Any, columns: Iterable) -> str: ...
    def case(schema: Any, s: str) -> str: ...
    def add_table(schema: Any, table_name: Any, entity: Optional[Any] = ...) -> Any: ...
    def order_tables_to_create(schema: Any) -> Any: ...
    def generate_create_script(schema: Any) -> Any: ...
    def create_tables(schema: Any, provider: Any, connection: Any) -> None: ...
    def check_tables(schema: Any, provider: Any, connection: Any) -> None: ...

class DBObject:
    def create(table: Any, provider: Any, connection: Any) -> None: ...

class Table(DBObject):
    typename: str = ...
    def __init__(table: Any, name: Any, schema: Any, entity: Optional[Any] = ...) -> None: ...
    def add_entity(table: Any, entity: Any) -> None: ...
    def exists(table: Any, provider: Any, connection: Any, case_sensitive: bool = ...) -> Any: ...
    def get_create_command(table: Any) -> str: ...
    def format_option(table: Any, name: Any, value: Union[bool, Any]) -> Union[str, Any, None]: ...
    def get_objects_to_create(table: Any, created_tables: Optional[Any] = ...) -> Any: ...
    def add_column(table: Any, column_name: Any, sql_type: Any, converter: Any, is_not_null: Optional[Any] = ..., sql_default: Optional[Any] = ...) -> Any: ...
    def add_index(table: Any, index_name: Any, columns: Any, is_pk: bool = ..., is_unique: Optional[Any] = ..., m2m: bool = ...) -> Any: ...
    def add_foreign_key(table: Any, fk_name: Any, child_columns: Any, parent_table: Any, parent_columns: Any, index_name: Optional[Any] = ..., on_delete: bool = ..., interleave: bool = ...) -> Any: ...

class Column:
    auto_template: str = ...
    def __init__(column: Any, name: Any, table: Any, sql_type: Any, converter: Any, is_not_null: Optional[Any] = ..., sql_default: Optional[Any] = ...) -> None: ...
    def get_sql(column: Any) -> str: ...

class Constraint(DBObject):
    def __init__(constraint: Any, name: Any, schema: Any) -> None: ...

class DBIndex(Constraint):
    typename: str = ...
    def __init__(index: Any, name: Any, table: Any, columns: Any, is_pk: bool = ..., is_unique: Optional[Any] = ...) -> None: ...
    def exists(index: Any, provider: Any, connection: Any, case_sensitive: bool = ...) -> Any: ...
    def get_sql(index: Any) -> Any: ...
    def get_create_command(index: Any) -> Any: ...

class ForeignKey(Constraint):
    typename: str = ...
    def __init__(foreign_key: Any, name: Any, child_table: Any, child_columns: Any, parent_table: Any, parent_columns: Any, index_name: Any, on_delete: Any, interleave: bool = ...) -> None: ...
    def exists(foreign_key: Any, provider: Any, connection: Any, case_sensitive: bool = ...) -> Any: ...
    def get_sql(foreign_key: Any) -> Any: ...
    def get_create_command(foreign_key: Any) -> Any: ...
