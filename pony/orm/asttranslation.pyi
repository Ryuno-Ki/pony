from pony.py23compat import basestring as basestring, iteritems as iteritems
from pony.thirdparty.compiler import ast as ast
from pony.utils import HashableDict as HashableDict, copy_ast as copy_ast, throw as throw
from typing import Any, Dict, NoReturn, Union

class TranslationError(Exception): ...

pre_method_caches: Dict
post_method_caches: Dict

class ASTTranslator:
    def __init__(translator: Any, tree: Any) -> None: ...
    def dispatch(translator: Any, node: Any) -> None: ...
    def call(translator: Any, method: Any, node: Any): ...
    def default_pre(translator: Any, node: Any) -> None: ...
    def default_post(translator: Any, node: Any) -> None: ...

def priority(p: int) -> Any: ...
def binop_src(op: Any, node: Any) -> Any: ...
def ast2src(tree: Any) -> Any: ...

class PythonTranslator(ASTTranslator):
    def __init__(translator: Any, tree: Any) -> None: ...
    def call(translator: Any, method: Any, node: Any) -> None: ...
    def default_pre(translator: Any, node: Any): ...
    def default_post(translator: Any, node: Any) -> None: ...
    def postGenExpr(translator: Any, node: Any) -> str: ...
    def postGenExprInner(translator: Any, node: Any) -> str: ...
    def postGenExprFor(translator: Any, node: Any) -> str: ...
    def postGenExprIf(translator: Any, node: Any) -> str: ...
    def postIfExp(translator: Any, node: Any) -> str: ...
    def postLambda(translator: Any, node: Any) -> str: ...
    def postOr(translator: Any, node: Any) -> str: ...
    def postAnd(translator: Any, node: Any) -> str: ...
    def postNot(translator: Any, node: Any) -> str: ...
    def postCompare(translator: Any, node: Any) -> str: ...
    def postBitor(translator: Any, node: Any) -> str: ...
    def postBitxor(translator: Any, node: Any) -> str: ...
    def postBitand(translator: Any, node: Any) -> str: ...
    def postLeftShift(translator: Any, node: Any) -> str: ...
    def postRightShift(translator: Any, node: Any) -> str: ...
    def postAdd(translator: Any, node: Any) -> str: ...
    def postSub(translator: Any, node: Any) -> str: ...
    def postMul(translator: Any, node: Any) -> str: ...
    def postDiv(translator: Any, node: Any) -> str: ...
    def postFloorDiv(translator: Any, node: Any) -> str: ...
    def postMod(translator: Any, node: Any) -> str: ...
    def postUnarySub(translator: Any, node: Any) -> str: ...
    def postUnaryAdd(translator: Any, node: Any) -> str: ...
    def postInvert(translator: Any, node: Any) -> str: ...
    def postPower(translator: Any, node: Any) -> str: ...
    def postGetattr(translator: Any, node: Any) -> str: ...
    def postCallFunc(translator: Any, node: Any) -> str: ...
    def postSubscript(translator: Any, node: Any) -> str: ...
    def postSlice(translator: Any, node: Any) -> str: ...
    def postSliceobj(translator: Any, node: Any) -> str: ...
    def postConst(translator: Any, node: Any) -> str: ...
    def postEllipsis(translator: Any, node: Any) -> str: ...
    def postList(translator: Any, node: Any) -> str: ...
    def postTuple(translator: Any, node: Any) -> str: ...
    def postAssTuple(translator: Any, node: Any) -> str: ...
    def postDict(translator: Any, node: Any) -> str: ...
    def postSet(translator: Any, node: Any) -> str: ...
    def postBackquote(translator: Any, node: Any) -> str: ...
    def postName(translator: Any, node: Any): ...
    def postAssName(translator: Any, node: Any): ...
    def postKeyword(translator: Any, node: Any) -> str: ...
    top_level_f_str: Any = ...
    def preStr(self, node: Any) -> None: ...
    def postStr(self, node: Any) -> str: ...
    def preJoinedStr(self, node: Any) -> None: ...
    def postJoinedStr(self, node: Any) -> str: ...
    def preFormattedValue(self, node: Any) -> None: ...
    def postFormattedValue(self, node: Any) -> str: ...

nonexternalizable_types: Tuple[Any, Any, Any, Any]

class PreTranslator(ASTTranslator):
    def __init__(
        translator: Any,
        tree: Any,
        globals: Any,
        locals: Any,
        special_functions: Any,
        const_functions: Any,
        outer_names: Any = ...) -> None: ...
    def dispatch(translator: Any, node: Any) -> None: ...
    def preGenExprInner(translator: Any, node: Any) -> bool: ...
    def preLambda(translator: Any, node: Any) -> Union[bool, NoReturn]: ...
    def postAssName(translator: Any, node: Any) -> None: ...
    def postName(translator: Any, node: Any) -> None: ...
    def postConst(translator: Any, node: Any) -> None: ...
    def postDict(translator: Any, node: Any) -> None: ...
    def postList(translator: Any, node: Any) -> None: ...
    def postKeyword(translator: Any, node: Any) -> None: ...
    def postCallFunc(translator: Any, node: Any) -> None: ...

extractors_cache: Dict[Any, Any]

def create_extractors(
    code_key: Any,
    tree: Any,
    globals: Any,
    locals: Any,
    special_functions: Any,
    const_functions: Any,
    outer_names: Any = ...): ...
